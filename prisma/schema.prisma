generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(uuid())
  name                   String?                  @db.VarChar(255)
  email                  String?                  @unique @db.VarChar(255)
  password               String?                  @db.VarChar(255)
  phone                  String?                  @db.VarChar(50)
  emailVerified          DateTime?                @map("email_verified")
  image                  String?                  @db.VarChar(500)
  role                   String                   @default("user") @db.VarChar(50)
  isTwoFactorEnabled     Boolean                  @default(false)
  accounts               Account[]
  bookings               Bookings[]
  TwoFactorConfirmation  TwoFactorConfirmation?

  @@map("user")
}

model Apartment {
  id               Int        @id @default(autoincrement())
  title            String     @db.VarChar(255)
  state            String     @db.VarChar(100)
  localGovernment  String     @db.VarChar(100)
  bookingPrice     String     @db.VarChar(50)
  description      String     @db.Text
  heroImage        String     @db.VarChar(500)
  imagesUrls       Images[]
  booking          Bookings?
}

model Images {
  id            Int         @id @default(autoincrement())
  url           String      @db.VarChar(500)
  apartment     Apartment   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId   Int
}

model Bookings {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  price       String      @db.VarChar(50)
  date        DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  apartment   Apartment   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId Int         @unique
}

model Account {
  id                 String    @id @default(uuid())
  userId             String
  type               String    @db.VarChar(50)
  provider           String    @db.VarChar(100)
  providerAccountId  String    @map("provider_account_id") @db.VarChar(255)
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?   @db.VarChar(50)
  scope              String?   @db.VarChar(255)
  id_token           String?   @db.Text
  session_state      String?   @db.VarChar(255)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}



// generator client {
//   provider = "prisma-client-js"
// }


// datasource db {
//   provider  = "postgresql"
//   url  	    = env("DATABASE_URL")

// }

// model User {
//   id                  String      @id @default(uuid())
//   name                String? 
//   email               String? @unique
//   password            String?
//   phone               String?
//   emailVerified       DateTime? @map("email_verified")
//   image               String?
//   role                String @default("user")
//   accounts            Account[]
//   bookings            Bookings[]
//   isTwoFactorEnabled Boolean @default(false)
//   TwoFactorConfirmation TwoFactorConfirmation?
//   @@map("user")
// }



// model Apartment {
//   id                Int @id @default(autoincrement())
//   title             String
//   state             String
//   localGovernment   String
//   bookingPrice      String
//   description       String
//   heroImage         String
//   imagesUrls        Images[]
//   booking           Bookings?
// }



// model Images {
//   id            Int         @id @default(autoincrement())
//   url           String
//   apartment     Apartment   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
//   apartmentId   Int      
// }



// model Bookings {
//   id          Int @id     @default(autoincrement())
//   title       String
//   price       String
//   date        DateTime    @default(now())
//   user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String
//   apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
//   apartmentId Int @unique
// }



// model Account {
//   id                 String      @id @default(uuid())
//   userId             String    
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String? 
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? 
//   session_state      String?
//   user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
//   @@map("account")
// }

// // enum HouseStatus {
// //   Booked
// //   Available
// // }

// // enum UserRole {
// //   ADMIN
// //   USER
// // }

// model VerificationToken {
//   id        Int      @id @default(autoincrement())
//   email     String
//   token     String @unique
//   expires   DateTime
//   @@unique([email, token])
// }



// model PasswordResetToken {
//   id         Int      @id @default(autoincrement())
//   email     String
//   token     String @unique
//   expires   DateTime
//   @@unique([email, token])
// }

// model twoFactorToken {
//   id         Int      @id @default(autoincrement())
//   email     String
//   token     String @unique
//   expires   DateTime
//   @@unique([email, token])
// }

// model TwoFactorConfirmation {
//   id          String     @id @default(uuid())
//   userId      String     
//   user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([userId])
// }