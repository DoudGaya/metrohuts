generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id                  String      @id @default(uuid())
  name                String? 
  email               String?     @unique
  password            String?
  phone               String?
  emailVerified       DateTime? @map("email_verified")
  image               String?
  role                UserRole @default(USER)
  accounts            Account[]
  bookings            Bookings[]
  enquiries           Enquiries[]
  isTwoFactorEnabled Boolean @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  @@map("user")
}


model Apartment {
  id                  Int        @id @default(autoincrement())
  title               String     
  state               String     
  lga                 String    
  address             String    
  price               String     
  slug                String
  description         String     
  heroImage           String     
  images              String[]
  bookings            Bookings[] // Changed from booking to bookings (plural) and made it an array
  status              ApartmentStatus @default(Available)  
  @@map("apartments")
}

model Bookings {
  id                Int @id     @default(autoincrement())
  date              DateTime    @default(now())
  checkInDate       DateTime
  checkOutDate      DateTime
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  apartment         Apartment   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId       Int         // Removed @unique constraint
  @@map("bookings")
}


// model Apartment {
//   id                  Int        @id @default(autoincrement())
//   title               String     
//   state               String     
//   lga                 String    
//   address             String    
//   price               String     
//   slug                String
//   description         String     
//   heroImage           String     
//   images              String[]
//   booking             Bookings?
//   status              ApartmentStatus @default(Available)  
//   @@map("apartments")
// }

// model Bookings {
//   id                Int @id     @default(autoincrement())
//   date              DateTime    @default(now())
//   checkInDate       DateTime
//   checkOutDate      DateTime
//   user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId            String
//   apartment         Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
//   apartmentId       Int @unique
//   @@map("bookings")
// }


model Homes {
  id                Int        @id @default(autoincrement())
  title             String     
  state             String     
  lga               String     
  address           String     
  price             String     
  slug              String
  description       String     
  heroImage         String     
  homeStatus        HomeStatus
  Enquiries         Enquiries[]
  images            String[]
  @@map("homes")
}
model Enquiries {
  id                Int @id     @default(autoincrement())
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  message           String?
  home              Homes @relation(fields: [HomeId], references: [id], onDelete: Cascade)
  HomeId            Int
  date              DateTime    @default(now())
  @@map("enquiries")
}

// model Bookings {
//   id                Int @id     @default(autoincrement())
//   date              DateTime    @default(now())
//   checkInDate       DateTime
//   checkOutDate      DateTime
//   user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId            String
//   apartment         Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
//   apartmentId       Int @unique
//   @@map("bookings")
// }








model Account {
  id                 String      @id @default(uuid())
  userId             String    
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("account")
}

enum ApartmentStatus {
  Booked
  Available
}

enum HomeStatus {
  Sold
  ComingSoon
  Selling
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String @unique
  expires   DateTime
  @@unique([email, token])
}



model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  email     String
  token     String    @unique
  expires   DateTime
  @@unique([email, token])
}

model twoFactorToken {
  id         Int      @id @default(autoincrement())
  email     String
  token     String    @unique
  expires   DateTime
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String     @id @default(uuid())
  userId      String     
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}