generator client {
  provider = "prisma-client-js"
}


// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.sqlite"
// }

model User {
  id                  String      @id @default(uuid())
  name                String? 
  email               String? @unique
  password            String?
  phone               String?
  emailVerified       DateTime? @map("email_verified")
  image               String?
  role                String @default("user")
  accounts            Account[]
  bookings            Bookings[]
  isTwoFactorEnabled Boolean @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  @@map("user")
}



model Apartment {
  id                Int @id @default(autoincrement())
  title             String
  state             String
  localGovernment   String
  bookingPrice      String
  description       String
  heroImage         String
  imagesUrls        Images[]
  booking           Bookings?
}



model Images {
  id            Int         @id @default(autoincrement())
  url           String
  apartment     Apartment   @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId   Int      
}



model Bookings {
  id          Int @id     @default(autoincrement())
  title       String
  price       String
  date        DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  apartmentId Int @unique
}



model Account {
  id                 String      @id @default(uuid())
  userId             String    
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("account")
}

// enum HouseStatus {
//   Booked
//   Available
// }

// enum UserRole {
//   ADMIN
//   USER
// }

model VerificationToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String @unique
  expires   DateTime
  @@unique([email, token])
}



model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  email     String
  token     String @unique
  expires   DateTime
  @@unique([email, token])
}

model twoFactorToken {
  id         Int      @id @default(autoincrement())
  email     String
  token     String @unique
  expires   DateTime
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String     @id @default(uuid())
  userId      String     
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}